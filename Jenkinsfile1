pipeline {
    agent any 

    tools {nodejs "Nodejs"}

    environment {
        registryCredential = 'dockerhub'
        imageName = 'snehamore213/internalapp5'
        dockerImage = ''
        }
    stages {
        stage('Run the tests') {
             agent {
                docker { 
                    image 'node:14-alpine'
                    args '-e HOME=/tmp -e NPM_CONFIG_PREFIX=/tmp/.npm'
                    reuseNode true
                }
            }
            steps {
                echo 'Retrieve source from github. run npm install and npm test' 
                git branch: 'main',
                    url: 'https://github.com/snehamore213/devops_internaldata.git'
                echo 'repo files'
                sh 'ls -a'
                echo 'install dependencies'
                sh 'npm install'
                echo 'Run tests'
                sh 'npm test'
                echo 'Testing completed'
            }
        }
        stage('SonarQube Analysis') {
       steps {
           script {
    def scannerHome = tool 'sonarqube'
      withSonarQubeEnv('sonarqube') {
      sh """/var/lib/jenkins/tools/hudson.plugins.sonar.SonarRunnerInstallation/sonarqube/bin/sonar-scanner \
       -D sonar.login=admin \
      -D sonar.password=sonar \
      -D sonar.projectBaseDir=/var/lib/jenkins/workspace/devops-data-capstone/ \
        -D sonar.projectKey=capstone \
        -D sonar.sourceEncoding=UTF-8 \
        -D sonar.host.url=http://35.188.217.149:9000/"""
        }
}
}
}
       
        stage('Building image') {
            steps{
                script {
                    echo 'build the image'
                    dockerImage = docker.build("${env.imageName}:${env.BUILD_ID}")
                    echo "${env.imageName}:${env.BUILD_ID}"
                    echo 'image built'
                }
            }
            }
        stage('Push Image') {
            steps{
                script {
                    echo 'push the image to docker hub'
                    docker.withRegistry('',registryCredential){
                        dockerImage.push("${env.BUILD_ID}")
                  }
                }
            }
        }     
         stage('deploy to k8s') {
             agent {
                docker { 
                    image 'google/cloud-sdk:latest'
                    args '-e HOME=/tmp'
                    reuseNode true
                        }
                    }
            steps {
                echo 'Get cluster credentials'
                sh 'gcloud container clusters get-credentials devops-practice-cluster --zone us-central1-c'
                sh "kubectl set image deployment/internal-ui internal-uic=${env.imageName}:${env.BUILD_ID}"
              }
            }       
        stage('Remove local docker images') {
            steps{
                script {
                    echo 'push the image to docker hub' 
                }
                // sh "docker rmi $imageName:latest"
                sh "docker rmi $imageName:$BUILD_NUMBER"
            }
        }
    }
 }


